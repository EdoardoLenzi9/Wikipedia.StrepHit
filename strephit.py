import click
import business.utils.quickstatememnts_utils as qs_utils
from business.services.quickstatements_service import QuickStatementsService
import business.utils.file_utils as file_utils
import domain.localizations as loc

quickStatementsService = QuickStatementsService()

def launch_method(name, method):
    print('start -> {0}\n'.format(name))
    print("Procedure started at: {0}\n".format(qs_utils.get_iso_time()))
    method()
    print("Procedure ended at: {0}\n".format(qs_utils.get_iso_time()))
    print('end -> {0}\n'.format(name))

@click.group(help='''
Simple script in python 2.7 that adds references to a wikidata .qs dump.\n

Assets: \n
    (Default) INPUT FILE: \t assets\supervised_dataset.qs\n
    (Default) OUTPUT FILE: \t supervised_dataset_output.qs\n
    (Default) REFRESHED URLS LOG: \t supervised_dataset_refreshed_urls.json\n
    (Default) ERRORS LOG FILE: \t supervised_dataset_errors.log\n
    (Default) SOURCE MAPPINGS FILE: \t supervised_dataset_source_mappings.json\n
    (Default) AUTOGENERATED MAPPINGS FILE: \t supervised_dataset_mappings.json\n
    (Default) AUTOGENERATED UNKNOWN MAPPINGS FILE: \t supervised_dataset_unknown_mappings.json\n

Manage your configs in "domain/localizations.py":\n
    * (bool) LOAD_MAPPINGS: loads autogenerated mappings from "assets/supervised_dataset_mappings.json" and "assets/supervised_dataset_unknown_mappings.json" files. \n
    * (bool) MAP_ALL_RESPONSES: when you call add_references procedure, in case of an unmapped 'reference URL' (P854) inserts in "supervised_dataset_mappings.json" every record of the result sparql-query (business/queries/sitelink_queries.py). \n
    * (bool) IS_ASYNC_MODE: when you call add_references procedure, processes each row on a new thread. \n
    * (bool) DELETE_ROW when you call: refresh procedure, deletes rows with unrechable 'reference URL' (P854). \n
    * (bool) REFRESH_UNKNOWN_DOMAINS: when you call refresh procedure, replaces old urls with updated urls in case of site redirection. \n
    * [Here you can also customize every default path of your assets]

Notes:
    * Async mode and MAP_ALL_RESPONSES mode need more testing
''')
def cli():
    pass

@click.command(help="Refresh URLs of your .qs input dump, for each row check if 'reference URL' (P854) is reachable and, in case of redirect, updates it")
def refresh():
    launch_method("Refresh urls", quickStatementsService.refresh_urls)

@click.command(help="For each row of your .qs input dump analyzes 'reference URL' (P854) property and generate a 'stated in' (P248) propery (where possible)")
def add_references():
    launch_method("Add references", quickStatementsService.add_db_references_async())

@click.command(help="Calls sequentially refresh and add_references commands") 
def refresh_and_add():
    print("start -> Refresh urls and add references\n")
    print('start -> Refresh urls\n')
    print("Procedure started at: {0}\n".format(qs_utils.get_iso_time()))
    quickStatementsService.refresh_urls()
    print("Procedure ended at: {0}\n".format(qs_utils.get_iso_time()))
    print('end -> Refresh urls\n')    

    file_utils.rename(loc.input_file, loc.old_input_file)
    file_utils.rename(loc.output_file, loc.input_file)

    print('start -> Add references\n')
    print("Procedure started at: {0}\n".format(qs_utils.get_iso_time()))
    quickStatementsService.add_db_references_async()
    print("Procedure ended at: {0}\n".format(qs_utils.get_iso_time()))
    print('end -> Add references\n')    

@click.command(help="For each row of your .qs input dump checks if 'reference URL' (P854) is just mapped in your mapping files (and logs if not)")
def export_unmapped():
    launch_method("Export unmapped urls list", quickStatementsService.export_unmapped_url_list())

cli.add_command(refresh)  
cli.add_command(add_references)
cli.add_command(refresh_and_add)
cli.add_command(export_unmapped)